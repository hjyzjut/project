"""
Django settings for hlsh_report project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from datetime import timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '+g3l%emx4syw3!3_fh&3mwzu1lm%lq4#e2@%bm=cdatoy_5w5q'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hlsh_report.apps.logs',
    'hlsh_report.apps.report',
    'hlsh_report.apps.user',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hlsh_report.urls'

# DRF配置
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.IsAuthenticated',
        
    ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend'),

    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
    ),
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema"
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hlsh_report.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASE_ROUTERS = [
    'hlsh_report.apps.report.reportRouter.Router',
    'hlsh_report.apps.logs.logsRouter.Router',
    'hlsh_report.defaultRouter.DefaultRouter',
    ]

DATABASES = {
    
    'default':{
        'ENGINE': 'django.db.backends.mysql',  # 使用的引擎，需要安装 PyMySQL 包
        'NAME': 'fill_in_sys',  # 连接数据库的名称
        'USER': 'hlsh',  # 连接数据库的用户名
        'PASSWORD': 'Lc3&xaOE',  # 连接数据库的密码
        'HOST': '121.37.136.201',  # 连接数据库的地址
        'PORT': '3338',  # 连接数据库的端口
    },
    'fill_apps':{
        'ENGINE': 'django.db.backends.mysql',  # 使用的引擎，需要安装 PyMySQL 包
        'NAME': 'fill_in',  # 连接数据库的名称
        'USER': 'hlsh',  # 连接数据库的用户名
        'PASSWORD': 'Lc3&xaOE',  # 连接数据库的密码
        'HOST': '121.37.136.201',  # 连接数据库的地址
        'PORT': '3338',  # 连接数据库的端口
    },
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# Allows any client access.
# CORS_ORIGIN_ALLOW_ALL = True



SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=8),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,  # TokenRefreshView之后会返回一个新的access和refresh
    'BLACKLIST_AFTER_ROTATION': False,  # 令牌黑名单
    'UPDATE_LAST_LOGIN': True,  # 登录时更新数据库字段

    'ALGORITHM': 'HS256',  # token签名算法
    'SIGNING_KEY': SECRET_KEY,  # 签名key
    'VERIFYING_KEY': None,  # 验证key，使用RS签名算法才需要设置
    'AUDIENCE': None,
    'ISSUER': None,

    # 需要身份验证的视图将接受的授权头类型(Authorization: Blog <token>)
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',  # http header验证名称Authorization
    'USER_ID_FIELD': 'id',  # 包含在生成的令牌中以标识用户

    # 生成的令牌中的声明，它将用于存储用户标识符。例如，'user id'的设定值意味着生成的令牌包含包含用户标识符的用户id声明。
    'USER_ID_CLAIM': 'user_id',
    # 'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),

}